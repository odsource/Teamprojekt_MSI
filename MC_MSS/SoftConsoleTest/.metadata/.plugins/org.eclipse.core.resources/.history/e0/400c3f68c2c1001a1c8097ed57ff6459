/*******************************************************************************
 * (c) Copyright 2009-2015 Microsemi SoC Products Group.  All rights reserved.
 *
 * Simple SmartFusion2 microcontroller subsystem (MSS) GPIO example program.
 *
 * Please refer to the file README.txt for further details about this example.
 *
 * SVN $Revision: 7923 $
 * SVN $Date: 2015-10-01 11:37:48 +0530 (Thu, 01 Oct 2015) $
 */
#include "drivers/mss_gpio/mss_gpio.h"
#include "CMSIS/system_m2sxxx.h"
#include "drivers/mss_timer/mss_timer.h"
#include "base.h"

/*==============================================================================
  Private functions.
 */
static void delay(void);
static void Timer_init();
void Timer1_IRQHandler( void );

/*==============================================================================
 * main() function.
 */
int main()
{
    /*
     * Initialize MSS GPIOs.
     */
    MSS_GPIO_init();
    
    /*
     * Configure MSS GPIOs.
     */
    MSS_GPIO_config( MSS_GPIO_0 , MSS_GPIO_OUTPUT_MODE );
    
    Timer_init();

    /*
     * Infinite loop.
     */
    for(;;)
    {

    }
}

/*==============================================================================
  Delay between displays of the watchdog counter value.
 */
/*

 static void delay(void)
{
    volatile uint32_t delay_count = SystemCoreClock / 128u;
    
    while(delay_count > 0u)
    {
        --delay_count;
    }
}
*/

static void Timer_init(void)
{
	MSS_TIM1_init(MSS_TIMER_PERIODIC_MODE);
	MSS_TIM1_start();
	MSS_TIM1_enable_irq();
	MSS_TIM1_load_immediate(50000000);
}

LOCAL UInt* LED_arr_ptr = &LEDarr1;
LOCAL UShort LEDcnt = 200;
LOCAL UShort array_length = 3;
LOCAL UShort hop = sizeof(UInt) / 2;

LOCAL UShort BTN1hyst = 0;
LOCAL UShort BTN2hyst = 0;

GLOBAL Void set_blink_muster(UInt arg) {
/*
 * Die Funktion muss so ertweitert werden,
 * dass ein Blinkmuster selektiert wird.
 */
    LED_arr_ptr = LED_arr[arg];
    if(arg LT 4) {
        array_length = 3;
    } else {
        if(arg EQ 4) {
            array_length = 5;
        }
        if(arg EQ 5) {
            array_length = 7;
        }
    }
    LEDcnt = *LED_arr_ptr;
}

void Timer1_IRQHandler( void )
{
	/*
	uint32_t gpio_pattern;
	gpio_pattern = MSS_GPIO_get_outputs();
	gpio_pattern ^= 0xFFFFFFFF;
	MSS_GPIO_set_outputs( gpio_pattern );
	MSS_TIM1_clear_irq();
	*/
	if(--LEDcnt EQ 0) {
	        LED_arr_ptr = LED_arr_ptr + hop;
	        if(*LED_arr_ptr EQ 0) {
	            if(tst_event(EVENT_BTN1)) {
	                __low_power_mode_off_on_exit();
	            }
	            LED_arr_ptr = LED_arr_ptr - ((array_length - 1) * hop);
	        }
	        LEDcnt = *LED_arr_ptr;
	        TGLBIT(P1OUT, BIT2);
	    }
	    if(TSTBIT(P1IN, BIT0)) {
	        if(BTN1hyst LT HYSTMAX) {
	            ++BTN1hyst;
	            if(BTN1hyst EQ HYSTMAX) {
	                set_event(EVENT_BTN1);
	            }
	        }
	    } else if(BTN1hyst GT 0) {
	        BTN1hyst--;
	    }
	    if(TSTBIT(P1IN, BIT1)) {
	        if(BTN2hyst LT HYSTMAX) {
	            ++BTN2hyst;
	            if(BTN2hyst EQ HYSTMAX) {
	                set_event(EVENT_BTN2);
	                __low_power_mode_off_on_exit();
	            }
	        }
	    } else if(BTN2hyst GT 0) {
	        BTN2hyst--;
	    }
}
